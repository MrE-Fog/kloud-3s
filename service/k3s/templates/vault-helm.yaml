---
apiVersion: v1
kind: Namespace
metadata:
  name: vault
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: vault-operator
  namespace: kube-system
spec:
  chart: vault-operator
  repo: https://kubernetes-charts.banzaicloud.com
  targetNamespace: vault
  version: 1.12.1
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: vault-secrets-webhook
  namespace: kube-system
spec:
  chart: vault-secrets-webhook
  repo: https://kubernetes-charts.banzaicloud.com
  targetNamespace: vault
  valuesContent: |-
    configMapMutation: true
    rbac:
      authDelegatorRole:
        enabled: false
    # env:
    #   VAULT_ADDR: https://external-vault.example.com
    #   VAULT_AUTH_METHOD: kubernetes
    #   VAULT_PATH: ${domain}
    #   VAULT_ROLE: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault
  namespace: vault
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: vault
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - "*"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: vault
roleRef:
  kind: Role
  name: vault-secrets
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault
---
# This binding allows the deployed Vault instance to authenticate clients
# through Kubernetes ServiceAccounts (if configured so).
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oidc-reviewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:service-account-issuer-discovery
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: selfsigned-vault-cert
  namespace: vault
spec:
  commonName: vault
  usages:
    - server auth
  dnsNames:
    - vault
    - vault.vault
    - vault.vault.svc
    - vault.vault.svc.cluster.local
  ipAddresses:
    - 127.0.0.1
  secretName: selfsigned-vault-cert
  issuerRef:
    kind: ClusterIssuer
    name: self-signed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
  namespace: vault
spec:
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  volumeName: vault-file
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: vault-file
  namespace: vault
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /vault/file
---
apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
  namespace: "vault"
spec:
  size: 1
  image: vault:1.6.2

  # Schedule the pods on the same node, since we are using hostPath storage
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key : node-role.kubernetes.io/master
            operator: Exists

  vaultPodSpec:
    priorityClassName: system-cluster-critical

  vaultConfigurerPodSpec:
    priorityClassName: system-cluster-critical

  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    traefik.ingress.kubernetes.io/service.serversscheme: "https"
  
  serviceAccount: vault
  serviceType: ClusterIP

  # Specify custom ports, if you do this you are required to specify the standard ones and your custom ones
  # This is useful if you specify an extra tcp listener for vault
  servicePorts:
    api-port: 8200
    cluster-port: 8201
    external-port: 8300
  
  ingress:
    annotations:
      kubernetes.io/ingress.class: traefik-cert-manager
      kubernetes.io/tls-acme: "true"
      traefik.ingress.kubernetes.io/router.tls: "true"
      traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    spec:
      rules:
        - host: vault.${domain}
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: vault
                  port:
                    number: 8300
      tls:
      - hosts:
        - vault.${domain}
        secretName: vault-ui-tls

  # Optionally Watch for the cert-manager managed secret and trigger restart of Vault when the secret change
  # cert-manager 0.11+ changed behaviour and it sets annotations rather than labels
  watchedSecretsLabels:
    - certmanager.k8s.io/certificate-name: vault-ui-tls
  watchedSecretsAnnotations:
    - cert-manager.io/certificate-name: vault-ui-tls

  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file
    - name: vault-ui-tls
      secret:
        defaultMode: 420
        secretName: vault-ui-tls

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file
    - name: vault-ui-tls
      mountPath: /etc/cert-manager

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces. Default  "vswh".
  caNamespaces:
    - "*"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      preFlightChecks: true
    kubernetes:
      secretNamespace: vault

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "/vault/file"
    listener:
    - tcp:
        address: "0.0.0.0:8300"
        tls_cert_file: /etc/cert-manager/tls.crt
        tls_key_file: /etc/cert-manager/tls.key
    - tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    telemetry:
      statsd_address: localhost:9125
    ui: true

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
  externalConfig:
    policies:
      - name: read_secrets
        rules: path "secret/*" {
          capabilities = ["read", "list"]
          }
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }
      - name: allow_secret_backends
        rules: path "sys/mounts*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }
      - name: allow_auth
        rules: path "auth/*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }
      - name: read_auth_backends
        rules: path "sys/auth" {
          capabilities = ["read"]
          }
      - name: allow_auth_backends
        rules: path "sys/auth*" {
          capabilities = ["create", "read", "update", "delete", "sudo"]
          }
      - name: allow_policy
        rules: path "sys/policies/acl*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }
      - name: read_policy
        rules: path "sys/policies/acl*" {
          capabilities = ["read"]
          }
      - name: read_health
        rules: path "sys/health" {
          capabilities = ["read", "sudo"]
          }
      - name: read_metrics
        rules: path "sys/metrics" {
          capabilities = ["read"]
          }
      - name: read_sys
        rules: path "sys/capabilities" {
          capabilities = ["create", "update"]
          }
      - name: read_self
        rules: path "sys/capabilities-self" {
          capabilities = ["create", "update"]
          }
      - name: allow_ssh
        rules: path "ssh-client-signer*" {
          capabilities = [ "create", "read", "update", "delete", "list", "sudo" ]
          }
      - name: pki_admin
        rules:
          path "pki*" {
            capabilities = [ "create", "read", "update", "delete", "list", "sudo" ]
          }
          path "pki/*" {
            capabilities = [ "create", "read", "update", "delete", "list", "sudo" ]
          }
      - name: pki_int
        rules:
          path "pki_int/issue/*" {
            capabilities = ["create", "update"]
          }
          
          path "pki_int/*" {
            capabilities = ["list"]
          }

          path "pki_int/certs" {
            capabilities = ["list"]
          }

          path "pki_int/revoke" {
            capabilities = ["create", "update"]
          }

          path "pki_int/tidy" {
            capabilities = ["create", "update"]
          }

          path "pki/cert/ca" {
            capabilities = ["read"]
          }
          
          path "pki*" {
            capabilities = [ "list" ]
          }

    auth:
      - type: kubernetes
        roles:
          # Allow every pod in the default namespace to use the secret kv store
          - name: default
            bound_service_account_names: ["default", "vault-secrets-webhook"]
            bound_service_account_namespaces: ["default", "vswh"]
            policies: allow_secrets,pki_int
            ttl: 1h

      # - type: jwt
        # config:
          # oidc_discovery_url: https://kubernetes
          # oidc_discovery_ca_pem: $${ file `/var/run/secrets/kubernetes.io/serviceaccount/ca.crt` }
          # bound_issuer: https://kubernetes
          # default_role: default
        # roles:
          # - name: default
            # role_type: jwt
            # bound_audiences: vault
            # bound_subject: system:serviceaccount:default:default
            # user_claim: sub
            # policies: allow_secrets
            # ttl: 1h

      - type: oidc
        config:
          oidc_discovery_url: https://gitlab.com
          oidc_client_id: ${client_id}
          oidc_client_secret: ${client_secret}
          default_role: default
        roles:
          - name: default
            role_type: oidc
            user_claim : sub
            oidc_scopes: openid,profile,email,read_user
            policies: allow_secrets,pki_int,allow_ssh
            ttl: 1h
            verbose_oidc_logging: "true"
            allowed_redirect_uris:
            - "https://vault.${domain}/ui/vault/auth/oidc/oidc/callback"
            bound_claims:
             email:
             - "admin@${domain}"
          - name: admin
            role_type: oidc
            user_claim : sub
            oidc_scopes: openid,profile,email,read_user
            policies: read_secrets,allow_secrets,allow_secret_backends,allow_auth,allow_auth_backends,allow_policy,read_policy,read_health,read_metrics,read_sys,read_self,pki_admin,allow_ssh
            ttl: 1h
            verbose_oidc_logging: "true"
            allowed_redirect_uris:
            - https://vault.${domain}/ui/vault/auth/oidc/oidc/callback
            bound_claims:
             email:
             - "admin@${domain}"

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
      
      - type: pki
        description: Vault PKI Backend
        config:
          default_lease_ttl: 168h
          max_lease_ttl: 720h
        configuration:
          config:
          - name: urls
            issuing_certificates: https://vault.vault:8200/v1/pki/ca"
            crl_distribution_points: https://vault.vault:8200/v1/pki/crl"
          root/generate:
          - name: internal
            common_name: vault.vault
          roles:
          - name: default
            allowed_domains: localhost,pod,svc,default,vault
            allow_subdomains: true
            generate_lease: true
            ttl: 1m
      - path: pki_int
        type: pki
        description: Vault PKI Org Backend
        config:
          default_lease_ttl: 84h
          max_lease_ttl: 360h
        configuration:
          config:
          - name: urls
            issuing_certificates: https://vault.${domain}/v1/pki_int/ca"
            crl_distribution_points: https://vault.${domain}/v1/pki_int/crl"
          root/generate:
          - name: exported
            common_name: ${domain}
          roles:
          - name: default
            allowed_domains: localhost,pod,svc,default,vault
            allow_subdomains: true
            generate_lease: true
            ttl: 1m
          - name: kloud-dot-io
            allow_any_name: true
            generate_lease: true
            ttl: 3m
      - type: ssh
        path: ssh-client-signer
        description: SSH Client Key Signing.
        configuration:
          config:
          - name: ca
            generate_signing_key: "true"
          roles:
          - name: ssh
            allow_user_certificates: "true"
            allowed_users: "*"
            key_type: "ca"
            default_user: "ubuntu"
            ttl: "24h"

    # Allows writing some secrets to Vault (useful for development purposes).
    # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
    startupSecrets:
      - type: kv
        path: secret/data/accounts/aws
        data:
          data:
            AWS_ACCESS_KEY_ID: secretId
            AWS_SECRET_ACCESS_KEY: bazenga-aws
      - type: kv
        path: secret/data/dockerrepo
        data:
          data:
            DOCKER_REPO_USER: dockerrepouser
            DOCKER_REPO_PASSWORD: dockerrepopassword
      - type: kv
        path: secret/data/mysql
        data:
          data:
            MYSQL_ROOT_PASSWORD: s3cr3t
      - type: kv
        path: secret/data/vitess
        data:
          data:
            VTGATE_USER: vtgate
            VTGATE_PASSWORD: vtgatepassword

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: info
    # - name: VAULT_CACERT
    #   value: /vault/tls/tls.crt

  # envsConfig:
  #   - name: VAULT_CACERT
  #     value: /vault/tls/tls.crt

  # If you are using a custom certificate and are setting the hostname in a custom way
  # sidecarEnvsConfig:
  #   - name: VAULT_CACERT
  #     value: /vault/tls/tls.crt

  # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # vaultPodSpec:
  #   hostAliases:
  #   - ip: "127.0.0.1"
  #     hostnames:
  #     - "vault.local"
