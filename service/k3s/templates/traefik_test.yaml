apiVersion: v1
kind: Namespace
metadata:
  name: whoami
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: whoami
  namespace: whoami
spec:
  replicas: 2
  selector:
    matchLabels:
      app: whoami
  template:
    metadata:
      labels:
        app: whoami
    spec:
      containers:
        - name: whoami
          image: containous/whoami
          imagePullPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: whoami
  namespace: whoami
  labels:
    app: whoami
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: whoami
  selector:
    app: whoami
---
# Serve global default cert i.e. self-signed-cert
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: test
  namespace: whoami
spec:
  routes:
    - match: Host(`test.${domain}`)
      kind: Rule
      services:
        - name: whoami
          port: 80
---
# Serve letsencrypt test certificate i.e. test-http01-cert
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: whoami
  namespace: whoami
spec:
  routes:
    - match: Host(`whoami.${domain}`)
      kind: Rule
      services:
        - name: whoami
          port: 80
  tls:
    secretName: test-http01-cert
---
# Serve letsencrypt live/valid certificate i.e. live-http01-cert
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: default
spec:
  routes:
    - match: Host(`dash.${domain}`)
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
  tls:
    secretName: live-http01-cert
---
# Use PassThrough TLS
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  name: kube-api
  namespace: default
spec:
  routes:
    - match: HostSNI(`kube-api.${domain}`)
      kind: Rule
      services:
        - name: kubernetes
          port: 443
  tls:
    passthrough: true
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: k8dash
  namespace: kube-system
spec:
  routes:
    - match: Host(`k8dash.${domain}`)
      kind: Rule
      services:
        - name: k8dash
          port: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  routes:
  - match: Host(`k8dash.${domain}`) && PathPrefix(`/main`)
    kind: Rule
    middlewares:
    - name: basic-auth
    services:
    - name: kubernetes-dashboard
      port: 80
  - match: Host(`k8dash.${domain}`)
    kind: Rule
    services:
    - name: kubernetes-dashboard
      port: 80
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: self-signed-cert
  namespace: default
spec:
  commonName: ${domain}
  secretName: self-signed-cert
  dnsNames:
    - ${domain}
    - "*.${domain}"
  issuerRef:
    name: self-signed
    kind: ClusterIssuer
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: self-signed-cert
  namespace: kube-system
spec:
  commonName: ${domain}
  secretName: self-signed-cert
  dnsNames:
    - ${domain}
    - "*.${domain}"
  issuerRef:
    name: self-signed
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: TLSStore
metadata:
  name: default
  namespace: default
spec:
  defaultCertificate:
    secretName: self-signed-cert
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: basic-auth
spec:
  basicAuth:
    secret: traefik
    headerField: X-WebAuth-User

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: basic-auth
  namespace: kube-system
spec:
  basicAuth:
    secret: traefik
    removeHeader: true
%{ if create_certs == true }
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: test-http01-cert
  namespace: whoami
spec:
  commonName: whoami.${domain}
  secretName: test-http01-cert
  dnsNames:
    - whoami.${domain}
  issuerRef:
    name: letsencrypt-test
    kind: ClusterIssuer
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: live-http01-cert
  namespace: default
spec:
  commonName: dash.${domain}
  secretName: live-http01-cert
  dnsNames:
    - dash.${domain}
    - k8dash.${domain}
  issuerRef:
    name: letsencrypt-live
    kind: ClusterIssuer
%{ endif }