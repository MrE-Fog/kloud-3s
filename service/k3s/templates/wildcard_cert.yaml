%{ if dns_auth.provider == "digitalocean" ~}
---
apiVersion: v1
kind: Secret
metadata:
  name: digitalocean-dns
  namespace: cert-manager
stringData:
  access-token: ${dns_auth.token}
%{ endif ~}
%{ if dns_auth.provider == "cloudflare" ~}
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-dns
  namespace: cert-manager
stringData:
  cloudflare-api-key: ${dns_auth.api_token}
  cloudflare-api-email: ${dns_auth.email}
%{ endif ~}
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: ${acme_email}
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers: %{ if dns_auth.provider != "" }
    # ACME DNS-01 provider configurations
    - dns01:
        %{~ if dns_auth.provider == "digitalocean" }
        digitalocean:
          tokenSecretRef:
            name: digitalocean-dns
            key: access-token
        %{ endif }
        %{~ if dns_auth.provider == "cloudflare" }
        cloudflare:
          email: dns_auth.email
          apiTokenSecretRef:
            name: cloudflare-dns
            key: cloudflare-api-key
        %{ endif } %{ endif }
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ${acme_email}
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers: %{ if dns_auth.provider != "" }
    # ACME DNS-01 provider configurations
    - dns01:
        %{~ if dns_auth.provider == "digitalocean" }
        digitalocean:
          tokenSecretRef:
            name: digitalocean-dns
            key: access-token
        %{ endif }
        %{~ if dns_auth.provider == "cloudflare" }
        cloudflare:
          email: dns_auth.email
          apiTokenSecretRef:
            name: cloudflare-dns
            key: cloudflare-api-key
        %{ endif } %{ endif }
%{ if create_certs == true }
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: test-dns01-cert
  namespace: default
spec:
  commonName: ${dns_auth.domain}
  secretName: test-dns01-cert
  dnsNames:
    - ${dns_auth.domain}
    - "*.${dns_auth.domain}"
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: live-dns01-cert
  namespace: default
spec:
  commonName: ${dns_auth.domain}
  secretName: live-dns01-cert
  dnsNames:
    - ${dns_auth.domain}
    - "*.${dns_auth.domain}"
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: TLSStore
metadata:
  name: default
  namespace: default
spec:
  defaultCertificate:
    secretName: live-dns01-cert
%{ endif }
