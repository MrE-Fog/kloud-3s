---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: loki
  namespace: kube-system
spec:
  chart: loki-stack
  repo: https://grafana.github.io/helm-charts
  targetNamespace: logging
  version: 2.4.1
  valuesContent: |-

    promtail:
      enabled: false
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: logging-operator
  namespace: kube-system
spec:
  chart: logging-operator
  repo: https://kubernetes-charts.banzaicloud.com
  targetNamespace: logging
  version: 3.9.5
  valuesContent: |-

    createCustomResource: false
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: logging-operator-logging
  namespace: kube-system
spec:
  chart: logging-operator-logging
  repo: https://kubernetes-charts.banzaicloud.com
  targetNamespace: logging
  version: 3.9.5
  jobImage: rancher/klipper-helm:v0.6.0-build20210608
  valuesContent: |-

    nameOverride: logging-operator-stack
    enableRecreateWorkloadOnImmutableFieldChange: true
    controlNamespace: logging
    tls:
      enabled: true
    fluentd:
      disablePvc: true
      bufferStorageVolume:
        hostPath:
          path: ""
    clusterFlows:
      - name: eventrouter
        spec:
          filters:
            - parser:
                remove_key_name_field: true
                reserve_data: true
                parse:
                  type: json
            - record_modifier:
                records:
                - fluentd_worker: $${ENV["HOSTNAME"]}
                - event_namespace: $${record["event"]["metadata"]["namespace"]}
          match:
            - select:
                labels:
                  app: eventrouter
          globalOutputRefs:
            - loki
      - name: webapp-pods
        spec:
          filters:
            - parser:
                remove_key_name_field: true
                reserve_data: true
                parse:
                  type: multi_format
                  patterns:
                  - format: nginx
                  - format: regexp
                    expression: "^\\[(?<timestamp>\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}),(?<pid>\\d{3}):\\s(?<severity>\\w*)\\/(?<worker>[a-zA-Z\\-0-9]*)\\]\\s(?<message>.*)$"
                    time_key: timestamp
                    time_format: "%Y-%m-%d %H:%M:%S"
                    keep_time_key: false
                  - format: none
            - record_modifier:
                records:
                - fluentd_worker: $${ENV["HOSTNAME"]}
          match:
            - select:
                namespaces:
                - default
          globalOutputRefs:
            - loki
      - name: system-pods
        spec:
          filters:
            - parser:
                remove_key_name_field: true
                reserve_data: true
                parse:
                  type: multi_format
                  patterns:
                  - format: nginx
                  - format: none
            - record_modifier:
                records:
                - fluentd_worker: $${ENV["HOSTNAME"]}
          match:
            - exclude:
                namespaces:
                - default
            - exclude:
                labels:
                  app: eventrouter
            - select: {}
          globalOutputRefs:
            - loki


    clusterOutputs:
      - name: loki
        spec:
          loki:
            url: http://loki:3100
            configure_kubernetes_labels: true
            labels:
              fluentd_worker: ""
              event_namespace: ""
            extra_labels:
              cluster: "${cluster}"
              region: "${region}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eventrouter 
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: eventrouter 
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: eventrouter 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eventrouter
subjects:
- kind: ServiceAccount
  name: eventrouter
  namespace: kube-system
---
apiVersion: v1
data:
  config.json: |- 
    {
      "sink": "stdout"
    }
kind: ConfigMap
metadata:
  name: eventrouter-cm
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventrouter
  namespace: kube-system
  labels:
    app: eventrouter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventrouter
  template:
    metadata:
      labels:
        app: eventrouter
        tier: control-plane-addons
    spec:
      containers:
        - name: kube-eventrouter
          image: gcr.io/heptio-images/eventrouter:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config-volume
            mountPath: /etc/eventrouter
      serviceAccount: eventrouter
      volumes:
        - name: config-volume
          configMap:
            name: eventrouter-cm
---