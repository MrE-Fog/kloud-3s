---
apiVersion: v1
kind: Namespace
metadata:
  name:  logging
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: loki
  namespace: kube-system
spec:
  chart: loki-stack
  repo: https://grafana.github.io/helm-charts
  targetNamespace:  logging
  version: 2.4.1
  jobImage: rancher/klipper-helm:v0.6.0-build20210608
  valuesContent: |-

    promtail:
      enabled: false
    loki:
      extraArgs:
        log.level: debug
      config:
        server:
          grpc_server_max_recv_msg_size: 104857600
          grpc_server_max_send_msg_size: 104857608
          grpc_server_max_concurrent_streams: 1000
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: rancher-logging-crd
  namespace: kube-system
spec:
  chart: rancher-logging-crd
  repo: https://charts.rancher.io
  targetNamespace:  logging
  jobImage: rancher/klipper-helm:v0.6.0-build20210608
  valuesContent: |-

    createCustomResource: false
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: rancher-logging
  namespace: kube-system
spec:
  chart: rancher-logging
  repo: https://charts.rancher.io
  targetNamespace:  logging
  jobImage: rancher/klipper-helm:v0.6.0-build20210608
  valuesContent: |-

    additionalLoggingSources:
      k3s:
        enabled: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eventrouter 
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: eventrouter 
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: eventrouter 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eventrouter
subjects:
- kind: ServiceAccount
  name: eventrouter
  namespace: kube-system
---
apiVersion: v1
data:
  config.json: |- 
    {
      "sink": "stdout"
    }
kind: ConfigMap
metadata:
  name: eventrouter-cm
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventrouter
  namespace: kube-system
  labels:
    app: eventrouter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventrouter
  template:
    metadata:
      labels:
        app: eventrouter
        tier: control-plane-addons
    spec:
      containers:
        - name: kube-eventrouter
          image: gcr.io/heptio-images/eventrouter:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config-volume
            mountPath: /etc/eventrouter
      serviceAccount: eventrouter
      volumes:
        - name: config-volume
          configMap:
            name: eventrouter-cm
---
apiVersion: v1
kind: Service
metadata:
  name: log-output
  namespace: logging
  labels:
    app.kubernetes.io/name: log-output
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: log-output
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-output
  namespace: logging
  labels:
    app.kubernetes.io/name: log-output
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: log-output
  template:
    metadata:
      labels:
        app.kubernetes.io/name: log-output
    spec:
      containers:
        - name: log-output
          image: "paynejacob/log-output:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            limits:
              memory: 16Mi
            requests:
              memory: 8Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          key: cattle.io/os
          operator: Equal
          value: linux
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterOutput
metadata:
  name: all-logs
  namespace: logging
spec:
  http:
    endpoint: http://log-output.logging.svc/all-logs/
    buffer:
      flush_interval: 10s
      flush_mode: interval
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterOutput
metadata:
  name: loki
  namespace: logging
spec:
  loki:
    url: http://loki:3100
    configure_kubernetes_labels: true
    labels:
      fluentd_worker: ""
      event_namespace: ""
      log_type: ""
    extra_labels:
      cluster: "${domain}"
    buffer:
      overflow_action: throw_exception
      timekey: 1m
      timekey_wait: 30s
      flush_interval: 10s
      flush_mode: interval
      flush_at_shutdown: true
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: all-logs
  namespace: logging
spec:
  filters:
    - grep:
        exclude:
        - key: log
          pattern: "^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^ :\\[]*)(?:\\[(?<pid>[0-9]+)\\])?(?:[^\\:]*\\:)? *(?<message>.*)$"
  match:
    - exclude:
        namespaces:
        - default
    - exclude:
        namespaces:
        - ip-config
    - exclude:
        labels:
          app: eventrouter
    - exclude:
        labels:
          app.kubernetes.io/name: traefik
    - exclude:
        labels:
          app.kubernetes.io/instance: pomerium
    - select: {}
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: eventrouter
  namespace: logging
spec:
  filters:
    - parser:
        remove_key_name_field: true
        reserve_data: true
        parse:
          type: json
    - record_modifier:
        records:
        - fluentd_worker: $${ENV["HOSTNAME"]}
        - event_namespace: $${record["event"]["metadata"]["namespace"]}
  match:
    - select:
        labels:
          app: eventrouter
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: webapp-pods
  namespace: logging
spec:
  filters:
    - parser:
        remove_key_name_field: true
        reserve_data: true
        parse:
          type: multi_format
          patterns:
          - format: nginx
          - format: regexp
            expression: "^\\[(?<timestamp>\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}),(?<pid>\\d{3}):\\s(?<severity>\\w*)\\/(?<worker>[a-zA-Z\\-0-9]*)\\]\\s(?<message>.*)$"
            time_key: timestamp
            time_format: "%Y-%m-%d %H:%M:%S"
            keep_time_key: false
          - format: none
    - record_modifier:
        records:
        - fluentd_worker: $${ENV["HOSTNAME"]}
  match:
    - select:
        namespaces:
        - default
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: traefik
  namespace: logging
spec:
  filters:
    - parser:
        remove_key_name_field: true
        reserve_data: true
        parse:
          type: multi_format
          patterns:
          - format: json
            time_format: "%Y-%m-%dT%H:%M:%SZ"
          - format: regexp
            expression: "^(?<ip>[^\\s]*)\\s-\\s(?<user>[^\"]*)\\s\\[(?<timestamp>[^\\]]*)\\]\\s\"(?<method>[^\\s]*)\\s(?<url>[^\\s]*)\\s(?<protocol>[^\"]*)\"\\s(?<status>\\d*)\\s(?<size>\\d*)\\s\"(?<referrer>[^\\s]*)\"\\s\"(?<browser>[^\"]*)\"\\s(?<pid>\\d*)\\s\"(?<source>[^\"]*)\"\\s\"(?<backend>[^\"]*)\"\\s(?<duration>.*ms)$"
            time_key: timestamp
            time_format: "%d/%b/%Y:%H:%M:%S +0000"
            keep_time_key: false
    - record_modifier:
        records:
        - fluentd_worker: $${ENV["HOSTNAME"]}
  match:
    - select:
        labels:
          app.kubernetes.io/name: traefik
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: pomerium
  namespace: logging
spec:
  filters:
    - record_transformer:
        enable_ruby: true
        records:
        - message: ${record["message"].gsub(/\033\[\d{1,2}(;\d{1,2}){0,2}[mGK]/, '')}
    - record_modifier:
        records:
        - fluentd_worker: $${ENV["HOSTNAME"]}
        replaces:
        - key: message
          expression: "/^(\\d{1,2}:\\d{2}[A|P]M)\\s(\\w{3})\\s([^=]+)\\s(.*)$/"
          replace: "event_time=\\1 level=\\2 msg=\\3 \\4"
    - parser:
        remove_key_name_field: true
        reserve_data: true
        parse:
          type: multi_format
          patterns:
          - format: json
          - format: logfmt
  match:
    - select:
        labels:
          app.kubernetes.io/instance: pomerium
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: k3s-syslog
  namespace: logging
spec:
  filters:
    - grep:
        regexp:
        - key: log
          pattern: "^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^ :\\[]*)(?:\\[(?<pid>[0-9]+)\\])?(?:[^\\:]*\\:)? *(?<message>.*)$"
    - parser:
        remove_key_name_field: true
        reserve_data: true
        key_name: log
        parse:
          type: multi_format
          patterns:
          - format: regexp
            expression: "^(?<timestamp>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^ :\\[]*)(?:\\[(?<pid>[0-9]+)\\])?(?:[^\\:]*\\:)? *(?<message>.*)$"
    - record_modifier:
        records:
        - fluentd_worker: ${ENV["HOSTNAME"]}
        - log_type: k3s-syslog
  globalOutputRefs:
    - loki
---
apiVersion: logging.banzaicloud.io/v1beta1
kind: ClusterFlow
metadata:
  name: ip-config
  namespace: logging
spec:
  filters:
    - grep:
        exclude:
        - key: message
          pattern: "^$"
    - concat:
        key: "message"
        n_lines: 7
    - parser:
        parse:
          format_firstline: "/^TIME/"
          multiline:
            - "/^TIME.*?: (?<timestamp>.*)\\n/"
            - "/^LEADER_DATA.*?: (?<leader_data>.*)\\n/"
            - "/^LEADER_NODE.*?: (?<leader_node>.*)\\n/"
            - "/^LEADER_IP.*?: (?<leader_ip>.*)\\n/"
            - "/^SERVICE_IP.*?: (?<service_ip>.*)\\n/"
            - "/^CURRENT_NODE.*?: (?<current_node>.*)\\n/"
            - "/^(?<message>.*)/"
          type: multiline
        remove_key_name_field: true
        reserve_data: true
  match:
    - select:
        namespaces:
        - ip-config
  globalOutputRefs:
    - loki
    - all-logs
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-proxy-headers: 'X-Forwarded-Proto: https'
    kubernetes.io/ingress.class: traefik-cert-manager
    kubernetes.io/tls-acme: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-basic-auth@kubernetescrd
  name: log-output
  namespace: logging
spec:
  tls:
    - hosts:
      - log-output.${domain}
      secretName: log-output-tls
  rules:
    - host: log-output.${domain}
      http:
        paths:
          - backend:
              serviceName: log-output
              servicePort: 80
---